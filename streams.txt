--- Введение ---

Стримы Java - это абстракция, которая позволяет обрабатывать последовательности данных, например, коллекции в декларативном стиле. 

--- Декларативное программирование ---

Декларативное программирование - это парадигма программирования, которая фокусируется на том, что компьютер должен сделать, а не том как это сделать.

До сих пор мы, в основном, программировали в императивном стиле, в котором фокус идет на том как выполняется код. Классический пример это циклы, где мы указываем последовательность шагов, которые нужно выполнить, чтобы добиться нужного результата. Каждый шаг это ответ на вопрос как.

var fruits = new ArrayList<>(List.of("Orange", "Apple", "Banana", "Grapes", "Cherry"));

fruits.sort((v1, v2) -> v1.compareTo(v2));
System.out.println(fruits); // Вывод: [Apple, Banana, Cherry, Grapes, Orange]

Примерно так работают стримы, они прячут перебор коллекций от нас так, чтобы мы могли фокусироваться на решаемой задаче.

-- Стримы --

Стримы представляют собой последовательность элементов с набором методов позволяющих преобразовывать эти элементы и выполнять над ними разнообразные вычисления. Исходная коллекция, в большинстве случаев, не меняется.

var names = users.stream() // Создаем стрим
            .filter(user -> user.getAge() > 18) // Фильтрация пользователей старше 18 лет
            .map(User::getName) // Преобразование User в String (имя пользователя)
            .sorted() // Сортировка имен в алфавитном порядке
            .toList(); // Сбор результата в список

Основные элементы работы со стримами:

- Коллекция сама по себе не является стримом, сначала нужно выполнить преобразование. В случае списков для этого нужно вызвать метод stream().
- Почти всегда в конце работы стрима нужно преобразовать его в список toList().

Так как эти методы возвращают коллекцию, то мы можем объединять их в цепочки, создавая более сложные варианты обработки данных. Благодаря разделению и возможности комбинации, стримы позволяют решать большинство задач преобразования коллекций без необходимости возвращаться к циклам.

Стримы работают и для массивов. Чтобы сделать стрим из массива, нужно вызвать метод Arrays.stream().

String[] chars = {"h", "e", "x", "l", "e", "t"};
var stream = Arrays.stream(chars);

--  Отображение (map) --

Базовая операция в стримах это map() (отображение). Она берет исходный список и формирует на его основе другой, преобразуя каждый элемент по указанным правилам. 

var roundedNumbers = numbers.stream()
                            .map(number -> Math.round(number))
                            // или проще через передачу ссылки
                            // .map(Math::round)
                            .toList();

Метод map() принимает как параметр лямбда-функцию, которая должна вернуть значение, вычисленное на базе переданного значения из исходной коллекции. Результатом может быть все что угодно. При этом отображение никогда не меняет размер коллекции, на выходе будет ровно то же, что было на входе.

--- Фильтрация ---

Операция filter() (фильтрация) позволяет отсеивать элементы из потока данных на основе заданных критериев. 

В отличие от операции отображения, фильтрация не выполняет преобразования элемента, она лишь вычисляет необходимость добавить это значение в результирующую коллекцию. Лямбда-функция в этом случае называется предикатом, так как ее задача вернуть булево значение. Если значение нужно добавить в новую коллекцию, тогда возвращается true, иначе false. Стримы позволяют выразить эту операцию в одну строчку:

// Фильтрация для выбора только четных чисел
var evenNumbers = numbers.stream()
                         .filter(number -> number % 2 == 0)
                         .toList();

Фильтрация всегда возвращает неизмененные элементы, но их количество может быть любым, включая все элементы исходной коллекции если они все удовлетворяют предикату и не включая никакие элементы в обратной ситуации. Тогда возвращается пустая коллекция.




















































































