--- Реляционная модель данных ---

Логика работы в реляционных СУБД строится на реляционной алгебре. Поэтому в подобных системах добавляют приставку «реляционная». 

-- Способы представления данных --

Внешнее представление — это то, что видит пользователь. Оно влияет на способ взаимодействия с данными. Поэтому разные способы представления данных называются моделями.

Эти модели не отражают то, что происходит на физическом уровне. Они описывают, как данные структурированы, и как с ними взаимодействовать. Модели данных очень похожи на абстрактные типы данных, которые определяют интерфейс взаимодействия с типом и не определяют его внутреннюю реализацию.

Существует много разных способов представить одни и те же данные. В этом уроке мы разберем три самых популярных:

Иерархическая модель
Сетевая модель
Реляционная модель

-- Иерархическая модель --

В иерархической модели данные представлены в виде дерева, где дочерние элементы находятся в зависимости от родительских.

-- Сетевая модель --

Сетевая модель данных расширяет иерархическую и позволяет иметь множество предков. Сетевая модель — это граф, у которого много вершин и соединений между ними.

Недостаток сетевой модели данных — высокая сложность и жесткость схемы БД, которая построена на ее основе.

-- Реляционная модель --

Наибольшее распространение получила реляционная модель данных. На ее основе построены реляционные СУБД. В реляционной модели данные — это набор отношений. 

Реляционная модель — удачный выбор в большинстве ситуаций. У нее нет недостатков, которые есть у других моделей.
Чтобы взаимодействовать с данными, которые описаны реляционной моделью, используется реляционная алгебра. 

Данные, представленные в реляционной модели, нужно привести к нормальной форме — это требования, которым должно удовлетворять отношение для минимизации избыточности данных, потенциально приводящих к логическим ошибкам.

--- Первая нормальная форма ---

Всего существует шесть нормальных форм, которые включают определенные требования. С каждым следующим уровнем требования все жестче, так как включают в себя предыдущие уровни.

Первая нормальная форма сводится к трем правилам:

- Каждая ячейка таблицы может хранить только одно значение
- Все данные в одной колонке могут быть только одного типа
- Каждая запись в таблице должна однозначно отличаться от других записей

Первичный ключ (PRIMARY KEY) — поле или набор полей, которые содержат уникальное значение для каждой записи. Первичный ключ не может меняться, его значение однозначно определяет любую запись в таблице.

Разберем два вида первичного ключа:

- Естественный — когда используются значения из окружающего мира, например, email, ФИО или паспортные данные. Такие первичные ключи используют редко из-за их ненадежности. Часто они не уникальны и могут изменяться или повторяться.
- Суррогатный — когда используются автоматически генерируемые уникальные значения. Такой ключ поддерживается любой базой данных «из коробки». Иногда это просто числа, а иногда — сложные число-буквенные строки или хеши.

--- Вторая нормальная форма ---

Вторая нормальная форма включает в себя два требования:

- Таблица должна быть в первой нормальной форме
- Все неключевые атрибуты таблицы должны зависеть от первичного ключа

Зависимость атрибута от первичного ключа — это ситуация, при которой ключ имеет значение, зависимое от конкретного контекста.

Внешний ключ — это не ссылка. Таблицы существуют сами по себе, и во внешнем ключе указывается конкретное значение, которое должно совпадать с первичным ключом другой таблицы.

Так выглядит синтаксис определения вторичного ключа:

REFERENCES <название таблицы, на которую смотрим> (<список полей в той таблице, которым соответствуем>)

-- Внешних ключей может быть любое количество: сколько ссылок — столько и ключей
CREATE TABLE orders (
    id bigint PRIMARY KEY,
    -- Тип внешнего ключа должен быть такой же,
    -- как у первичного в той таблице, куда ссылается внешний
    user_id bigint REFERENCES users (id),
    -- остальные поля
);

Благодаря вторичному ключу поддерживаются гарантии корректности данных. Например, невозможно удалить запись из основной таблицы, если на нее есть ссылки из внешних ключей в другой таблице. Так не получится случайно завести базу в неконсистентное состояние — когда данные ссылаются на несуществующие данные.

--- Третья нормальная форма ---

Третья нормальная форма включает в себя два пункта:

- Таблица должна быть во второй нормальной форме
- Все колонки в таблице зависят от первичного ключа и не зависят друг от друга

--- Онтология ---

Описание объектов рассматриваемой области и связей между ними называется онтологией предметной области. 

Каждая сущность в реляционной базе данных представлена таблицей, а связи между сущностями реализуются через внешние ключи.

С помощью ER-модели программист формирует необходимую модель данных. Необязательно на бумаге или в специализированных программах. Чаще такая модель существует только в голове и коде.

-- Что такое ERD --

Чтобы визуализировать ER-модель, используют диаграмму Entity-Relationship Diagram (ERD).

В ERD каждая сущность представлена блоком, в котором перечисляются поля. Между блоками рисуются линии, у которых есть некоторые заранее определенные концы. Они определяют тип связи между сущностями:

- Один ко многим, one-to-many или o2m. 
- Один к одному, one-to-one или o2o. 
- Многие ко многим, many-to-many или m2m.

Онтология помогает описывать предметную область программы и показывать связи ее сущностей. 

--- Внешний ключ ---

Внешний ключ — это ограничение, которое связывает указанную колонку с данными из другой таблицы. Такое ограничение гарантирует целостность данных.

CREATE TABLE topics (
  id bigint PRIMARY KEY,
  -- таблица topics связана с таблицей users
  user_id bigint REFERENCES users(id) NOT NULL,
  title varchar(255),
  body text,
  created_at TIMESTAMP NOT NULL
);

Если попробовать вставить в topics запись со значением user_id, которого нет в таблице users, то возникнет ошибка.
Если попытаться удалить запись из users, на которую есть ссылки из таблицы topics, то возникнет ошибка.

Внешний ключ проверяет целостность данных и не позволяет появляться «мусору». Поэтому лучше ставить внешние ключи на все идентификаторы, для которых есть родительская таблица в базе.

Внешние ключи поддерживают несколько вариаций. Таким образом они поддерживают целостность, но не приводят к ошибкам при попытке удалить запись.

Вариант 1 — Каскадное удаление:

CREATE TABLE topics (
    user_id bigint REFERENCES users(id) ON DELETE CASCADE,
);

В таком варианте при попытке удалить родительскую запись (users) будут удалены все записи в topics, которые ссылаются на этого пользователя. 
Каскадное удаление — опасная опция, так как можно случайно лишиться данных. 

Вариант 2 — Записи остаются, но вместо идентификатора проставляется null:

CREATE TABLE topics (
  user_id bigint REFERENCES users(id) ON DELETE SET NULL,
);

При использовании внешних ключей необходимо учитывать возможность возникновения ошибок при вставке или удалении данных. Поэтому важно хорошо продумывать структуру связей между таблицами и выбирать подходящие действия при удалении связанных данных (CASCADE, SET NULL и др.).

--- Производительность ---

Вопрос производительности базы данных и запросов к ней с течением времени становится все актуальнее. Чем больше проект и данных в таблицах и сложнее связи, тем выше вероятность столкнуться с медленной работой и нежелательными блокировками.

-- EXPLAIN --

В СУБД реализована подсистема, которая называется планировщик или scheduler. Она строит план запроса — описывает, как будут извлекаться данные, которые хранятся внутри базы. Когда планировщик строит план, он учитывает множество факторов — например, статистику обращений или информацию о количестве данных в таблицах.

Результат работы планировщика можно посмотреть командой EXPLAIN:

EXPLAIN SELECT * FROM users
  JOIN topics ON users.id = topics.user_id
  WHERE users.created_at > '10.10.2018';

Выполнение запроса идет изнутри наружу, начиная с самого сдвинутого блока. Каждая операция начинается со стрелки ->. Затем данные, полученные на этих шагах, передаются выше — и так до самого верха.

-- Индексы --

Некоторые запросы уже достаточно оптимизированы, поэтому для их ускорения используют индексы — специальную структуру внутри базы данных, которая создается, чтобы ускорить поиск. 
Индекс в базе данных подобен предметному указателю в любой книге:

CREATE INDEX ON users(birthday);

Этот запрос создает индекс на таблице users по полю birthday. Теперь запросы с условием или сортировкой по birthday будут работать быстрее за счет использования индекса во время подготовки данных. 

Создание индекса не гарантирует эффективности. Многое зависит от того, правильный ли индекс создан, сколько данных в таблице, какие запросы выполняются к этой таблице, сколько уже индексов было.

В PostgreSQL встроено шесть разных видов индексов, которые подходят под разные ситуации. Для работы с ними нужно понимать несколько вещей:

- Устройство индексов. Здесь не обойтись без знания структур данных и алгоритмов. В первую очередь речь идет про сбалансированные деревья — btree
- Классификацию видов запросов. Например, запрос по диапазону или запрос с применением LIKE оператора — разные виды запросов, которые по-разному работают и оптимизируются
- Влияние различных конструкций SQL на план запроса. Например, ORDER BY — дорогая операция, которая часто приводит к полному перебору таблицы

-- Денормализация --

Еще один подход для оптимизации называется денормализацией — процесс, обратный нормализации. В реляционной теории такого понятия нет и оно противоречит ее идеям. Но на практике этот способ активно применяется, так как за счет избыточности позволяет упростить запросы, так как данные ближе и их легче извлечь.

Цена за денормализацию — дополнительный объем и иногда необходимость производить синхронизацию данных самостоятельно.