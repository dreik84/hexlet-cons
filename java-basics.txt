--- Введение ---

Java — язык программирования общего назначения, который является одним из самых востребованных языков. Он используется для создания приложений в разных областях: в вебе, разработке игр, мобильного ПО, и даже программ для корпораций и научных институтов.

--- Первая программа ---

class App {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}

-- Комментарии --

Комментарии в Java бывают трех видов:
- Однострочные комментарии начинаются с //
- Многострочные комментарии начинаются с /* и заканчиваются на */
- Документирующие комментарии начинаются с /** и заканчиваются на */

---  Инструкции (Statements) ---

Инструкция — это команда для компьютера. Код на Java — это набор инструкций, которые, обычно, отделяются друг от друга символом ;.
Инструкция — это единица исполнения. Программа, которая запускает код на Java, выполняет инструкции строго по очереди.


--- Арифметические операции ---

На базовом уровне компьютеры оперируют только числами. Даже в прикладных программах на высокоуровневых языках внутри много чисел и операций над ними.

+ - сложение
* — умножение
/ — деление
- — вычитание
% — остаток от деления

-- Операторы --

Знак операции, такой как +, называют оператором. Оператор — просто символ, который выполняет операцию, например, сложение.

Операции, которые требуют наличия двух операндов, называются бинарными.
Бывают еще:
Унарные — с одним операндом
Тернарные — с тремя операндами

-- Коммутативная операция --

Бинарная операция считается коммутативной, если вы получаете тот же самый результат, поменяв местами операнды.

-- Числа с плавающей точкой --

В математике существуют разные виды чисел, например:
Натуральные — это целые числа от 1 и больше
Рациональные — это числа с точкой, например, 0.5
С точки зрения устройства компьютеров, между этими видами чисел — пропасть.

Разработчикам важно понимать, что операции с плавающими числами неточны, но эту точность можно регулировать.

https://habr.com/ru/articles/112953/

--- Строки ---

Любой одиночный символ в кавычках — это строка. Пустая строка "" — это тоже строка. То есть строкой мы считаем все, что находится внутри кавычек, даже если это пробел, один символ или вообще отсутствие символов.

Для вывода кавычки " используется символ экранирования: \.
Он же применяется для вывода символа \ ( напр. \\ ).

-- Экранирующие последовательности --

Символ перевода строки: \n
\n — это пример экранирующей последовательности (escape sequence). Их еще называют управляющими конструкциями. Хотя таких символов не один десяток, в программировании часто встречаются всего несколько.

-- Конкатенация --

Операция соединения строк в программировании называется конкатенацией и выглядит так:

"Dragon" + "stone"

https://ru.wikipedia.org/wiki/%D0%9F%D0%B5%D1%80%D0%B5%D0%B2%D0%BE%D0%B4_%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%B8#%D0%98%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F

--- Переменные ---

Переменная представляет собой именованную ячейку памяти, которой может быть присвоено значение.

Для имени переменной используется любой набор допустимых символов, к которым относятся буквы английского алфавита, цифры, знак _. При этом цифру нельзя ставить в начале. Имена переменных регистрозависимы, то есть имя hello и имя heLLo - это два разных имени и две переменные. 

var first = "Kings";

Java — статически типизированный язык. Это значит, что тип переменной задается при определении и больше не меняется.

-- Константы --

final var pi = 3.14;

В отличие от переменных, в начале определения константы используют ключевое слово final. Оно сообщает компилятору запрет на изменение. Любая попытка поменять константу приведет к ошибке.

--- Именование ---

Постарайтесь давать им такие имена, чтобы они были максимально понятны без контекста, без изучения окружающего кода.
Существует общепринятое правило: не используйте транслит для имен, только английский язык. 

В именовании переменных можно выделить четыре основных подхода, которые иногда комбинируют друг с другом. Все эти подходы проявляют себя, когда имя переменной состоит из нескольких слов:

kebab-case — составные части переменной разделяются дефисом (my-super-var)
snake_case — для разделения используется подчеркивание (my_super_var)
CamelCase — каждое слово в переменной пишется с заглавной буквы (MySuperVar)
lowerCamelCase — каждое слово в переменной пишется с заглавной буквы, кроме первого (mySuperVar)

В Java используется CamelCase и его вариация lowerCamelCase, при котором первая буква первого слова — строчная.

-- Магические числа --

Магические числа (magic numbers) — числа, происхождение которых невозможно понять без глубокого знания происходящего внутри участка кода.
Выход из ситуации прост: достаточно создать переменные с правильными именами.

https://ru.hexlet.io/blog/posts/naming-in-programming

--- Типы данных ---

Внутри высокоуровневых языков программирования данные разделяются по типам. Например, строки относятся к типу String, а числа — к типу int.

-- Явная типизация --

int x = 3;
String greeting = "Hello Hexlet!";

Java — это статически типизированный язык. В таких языках тип переменной фиксируется при ее объявлении. В большинстве языков для этого перед именем переменной указывается ее тип — в примере выше это число (int) и строка (String).

Раньше на Java создавали переменные только так, до тех пор пока не появился var. var – специальное ключевое слово, которое включает механизм вывода типов. Вывод типов автоматически определяет тип присваиваемого значения и связывает его с переменной.

Вывод типов предпочтителен в большинстве ситуаций, однако бывает такое, что выводимый тип нас не устраивает. Тогда мы можем указать тип явно.

-- Какие бывают типы --

Глобально, типы данных в Java делятся на две большие группы:
Примитивные — предопределены в Java
Ссылочные или не примитивные — создаются самим программистом, за исключением String и Array

Всего в Java восемь примитивных типов данных:
byte
short
int
long
float
double
boolean
char

Рассмотрим первые четыре типа. Это целые числа разного размера:
byte — занимает в памяти 1 байт, значит может хранить числа от -128 до 127
short — занимает в памяти 2 байта
int — занимает в памяти 4 байта
long — занимает в памяти 8 байт

-- Значение null --

// Определение переменной без инициализации значением
// С var такое не сработает, так как невозможно вывести тип
String a;

Что находится внутри переменной a? Если мы ее распечатаем, то увидим null. Значение null используется для ссылочных типов, когда значение не определено.

Любой ссылочный тип данных может принимать значение null.А вот примитивные типы и null не совместимы. Примитивное значение всегда должно быть определено.

-- Значение по умолчанию --

В Java компилятор не присваивает автоматически дефолтные значения локальным переменным примитивных типов, поэтому разработчик должен явно инициализировать переменную перед её использованием.

Если попытаться обратиться к локальной переменной до её инициализации, компилятор выдаст ошибку.

-- Явное преобразование типов --

В программировании регулярно встречаются задачи, когда один тип данных нужно преобразовать в другой. Простейший пример – работа с формами на сайтах.

Данные формы всегда приходят в текстовом виде, даже если значение число. Вот как его можно преобразовать:

var number = Integer.parseInt("345");

Если нужно конвертировать из примитивного типа в примитивный, то все проще. Достаточно перед значением в скобках указать желаемый тип. В результате значение справа преобразуется в значение другого типа, указанного слева:

var result = (int) 5.1;

-- Неявное преобразование типов --

Некоторые преобразования в Java могут выполняться автоматически без явного указания программистом. Такое преобразование называется неявным преобразованием типов. Если в одном выражении участвуют разные типы данных, Java может сама без явного указания преобразовать один тип данных в другой для выполнения операции. Для этого нужно, чтобы типы были совместимы между собой и чтобы размерность преобразуемого была равна или меньше результирующего типа.

Например, числовые типы данных совместимы друг с другом, но автоматическое преобразование из числового типа в boolean не сможет выполниться.

Также без проблем и без потери точности автоматически выполнится преобразование из типа short в тип int. В этом случае значение типа short, которое занимает в памяти 2 байта, расширяется до типа int, которое занимает 4 байта.А вот обратное преобразование не будет выполнено автоматически.

Еще одним примером неявного преобразования типов является преобразование чисел в строку при конкатенации числа со строкой. В этом случае Java автоматически преобразует число в строковое представление и объединяет его с другой строкой.

---  Вызов методов ---

Функции — одна из ключевых конструкций в программировании, без них невозможно сделать практически ничего. Функции бывают как встроенные в язык, так и добавленные программистом.
В Java невозможно создать обычную функцию, как это позволяет делать большинство других языков. Все функции Java создаются только внутри классов, которые мы пока не разбирали. А функции, которые определены внутри классов, принято называть методами.

Методы — это действия, которые нужно выполнить над данными, к которым они применяются.
Основное в работе с методами – понять принцип возврата значения. 

-- Параметры методов --

Параметров может быть больше, чем один.
Параметры могут содержать значение по умолчанию там, где это значение используется чаще всего.

--- Ошибки оформления, синтаксиса и линтера ---

-- Синтаксические ошибки --

Примером может быть забытая ;, неправильно расставленные скобки и другие детали. Подобные ошибки называются синтаксическими, потому что они нарушают правила синтаксиса языка. Эти ошибки обнаруживаются на этапе компиляции, до реального запуска.

-- Ошибки типов --

Типы в языках программирования определяют операции которые можно выполнять над данными.
Java это статически типизированный язык, поэтому процесс проверки соответствия типов выполняется на этапе компиляции до запуска программы на выполнение.

-- Ошибки выполнения --

Ошибки, которые возникают в процессе работы. Их тяжело или даже невозможно отследить на этапе компиляции. Например, в Java деление на ноль является ошибкой, но возникает она уже во время выполнения программы.
Другой пример, когда возникают эти ошибки это работа с файлами. Попытка прочитать несуществующий файл или создать файл, который уже был создан, приведут к ошибке выполнения.

Ошибки выполнения базируются на механизме называемом исключения. Когда происходит подобная ошибка, говорят что было выброшено исключение (или возбуждено исключение, или возникло исключение). Исключения имеют имена и их видно в выводе ошибки. В случае деления на ноль это java.lang.ArithmeticException. Особенностью системы исключений является то, что исключениями можно управлять.

-- Логические ошибки --

Самые сложные ошибки, которые не приводят к остановке программы. То есть программа работает, но ее результат не соответствует ожидаемому.
Так как эти ошибки не отлавливаются автоматически, профессиональные программисты пишут автоматизированные тесты, которые проверяют, что программа работает правильно.

-- Ошибки линтера --

Код программы следует оформлять определенным образом, чтобы он был достаточно понятным и простым в поддержке.
Специальные наборы правил — стандарты — описывают различные аспекты написания кода. Конкретно в Java самым распространенным стандартом является стандарт от Sun.
В любом языке программирования существуют утилиты — так называемые линтеры. Они проверяют код на соответствие стандартам. В Java это checkstyle.
Соблюдение данных правил не влияет на результат, но помогает писать код понятнее и проще для восприятия.

--- Вызов метода — выражение, неизменяемость строк ---

В программировании выражение — нечто возвращающее результат, который можно использовать.
Особенность выражений в том, что они возвращают результат, который можно использовать — например, присвоить переменной или вывести на экран.
Но не все в программировании является выражением. Определение переменной — это инструкция, она не может быть частью выражения.
Поговорим о методах. Вызов метода — это выражение или нет? Мы знаем, что методы возвращают результат, то есть да, они выражения. 

-- Неизменяемость строк --

Дело в том, что строки в Java неизменяемы. Не существует способа и методов, способных изменить саму строку. Любой метод строки может только вернуть новую строку.

---  Цепочки вызовов методов ---

var name = " How much is the fish?   ";
name = name.trim().replace("?", "").replace(" ", "-").toLowerCase();

Благодаря тому, что каждый метод возвращает новую строку, мы можем продолжать обрабатывать ее, вызывая методы подряд. Если цепочка методов становится слишком длинной, то ее можно разбить на несколько строк:

name = name.trim()
    .replace("?", "")
    .replace(" ", "-")
    .toLowerCase();

--- Детерминированность ---

Метод называется детерминированным тогда, когда для одних и тех же входных параметров он возвращает один и тот же результат. 

-- Побочные эффекты --

Вывод на экран и возврат значения из метода — разные и независимые операции.
Побочным эффектом называют действия, которые соприкасаются с внешним окружением. К таким действиям относятся любые сетевые взаимодействия, взаимодействие с файловой системой (чтение и запись файлов), вывод информации на экран, печать на принтере и так далее.
Побочные эффекты — один из основных источников проблем и ошибок в программных системах. Код с побочными эффектами сложен в тестировании и ненадежен. При этом без побочных эффектов программирование не имеет смысла. Без них было бы невозможно получить результат работы программы (записать в базу, вывести на экран, отправить по сети и так далее).

--- Стандартная библиотека ---

Java, как и любой другой язык, поставляется с набором полезных методов. Все вместе они составляют так называемую стандартную библиотеку. В нее обычно входят тысячи методов, которые невозможно выучить — этого и не нужно делать. Подразумевается, что любой программист знает, где искать документацию по ним и примерно представляет себе, чего он хочет достичь. 

Вот некоторые советы, как узнавать о новых методах:
- Всегда четко отслеживайте, с каким типом данных вы сейчас работаете. Почти всегда вы найдете необходимый метод в соответствующем разделе документации — например, для работы со строками нужно изучать строковые методы
- Периодически открывайте раздел со стандартными методами по изучаемой тематике и просто пробегайтесь по ним, изучая сигнатуры и способы использования
- Чаще читайте чужой код, особенно код библиотек, которые вы используете. Он весь доступен на GitHub

--- Какие бывают методы ---

-- Вызовы методов у объектов --

var random = new Random();
random.nextInt(10);

Такие методы выполняют действия над объектами, у которых они вызываются, и часто не принимают никаких аргументов.

-- Вызовы статических методов --

Math.random();

Класс Math в данном случае нужен только для вызова, потому что методы определены внутри них. Java не позволяет определять методы вне классов.

Выводы
- Статические методы не связаны с конкретными объектами и вызываются из класса напрямую
- Нестатические методы строят свою логику относительно данных самого объекта и вызываются у конкретных объектов

--- Определение методов ---

Определение собственных методов значительно упрощает написание и поддержку программ. Например, методы позволяют объединять составные операции в одну.

-- Как создавать методы --

       public           static                void                myMethod    (var first, var second)

модификатор доступа | тип метода | тип возвразаемого значения |  имя метода  |      параметры

--- Метод main ---

В таком виде метод main, как мы его определяем, имеет особенное значение для Java. 
Java автоматически его вызывает, когда программа запускается из консоли.
Обязательно ли его определять? Нет, Java не накладывает никакого ограничения на то, какие и сколько методов вы определите в классе. Так же как и нет ограничения на количество и имена классов.


























































































































