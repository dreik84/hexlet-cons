--- О курсе ---

Умение создавать классы и пользоваться объектами важная часть объектно-ориентированного программирования, но недостаточная для того, чтобы писать по-настоящему хорошо организованные программы. В этом нам помогут принципы объектно-ориентированного дизайна, которые включают в себя несколько важных элементов:

- Предметно-ориентированное программирование.
- Шаблоны проектирования.
- И даже антипаттерны. Описание того как не надо писать программы.

-- Шаблоны проектирования (Паттерны) --

Паттерны - это принципы организации кода, для решения каких-то распространенных задач в программировании. В общем понимании паттерны не являются спецификой ООП, паттерны встречаются везде и бывают как очень локальными, для небольших кусков кода, так и глобальными. Их часто называют архитектурными, такие паттерны относятся к организации каких-то больших частей или даже всего приложения.

-- Предметно-ориентированное программирование --

Любое прикладное приложение работает с какой-то конкретной предметной областью.
Во многом прикладное программирование занимается тем, что перекладывает предметную область на код.

--- Билдер (Builder) ---

Билдер (Builder) это шаблон проектирования, который используется там, где есть необходимость постепенного создания объекта, таким образом, чтобы гарантировалась его целостность, то есть то, что он создан целиком и полностью так, как это предполагалось.

@Builder
@Data
public class Car { // Ford
    private String model;
    private String engine;
    private String interior;
    private boolean hasSunroof;
    private String color = "Black";
}

Lombok включает аннотацию @Builder, которая добавляет билдер прямо в наш класс.

var car = Car.builder()
    .model("Mustang")
    .engine("3.6")
    .interior("Leather")
    .hasSunroof(true)
    .color("Silver Metallic")
    .build();

Здесь вначале вызывается статический метод builder(), который возвращает объект для сборки. Затем, после того как объект собран вызывается build(), который возвращает наш объект.







































