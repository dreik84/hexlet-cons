--- О курсе ---

Классы в Java одна из ключевых концепций, вокруг которой строится код. Буквально весь код описывается внутри классов без возможности выбора. Этим Java сильно отличается от многих других языков, где классы добавляются только по необходимости либо их нет вообще.

--- Статические методы ---

Одна из базовых конструкций в программировании - функция. С помощью функций мы выделяем повторяющиеся блоки кода и вводим новые операции, которые не заложены в язык.
С Java все немного сложнее. Она не позволяет создавать обычные функции. Java требует наличия класса для определения функций, которые, в этом случае, называются методами. 

Если вызов метода идет из того же класса, где он определен, то указывать имя класса перед ним не нужно:

class App {
    public static String greeting() {
        return "just a string";
    }

    public static void main(String[] args) {
        // Тот же класс, поэтому имя не обязательно
        greeting();
        // Хотя, чисто технически, его можно поставить
        // App.greeting();
    }
}

Методы, определенные как static, называют статическими.

--- Объекты ---

Упрощенно, с помощью классов описываются категории объектов, например, "кошки" или "адреса" или даже "строки". На базе классов создаются объекты, из которых потом строится логика работы кода.

var user = new User("Danil", "Miloshin");

В коде мы создаем объект "пользователь" с указанными именем и фамилией. Делается это с помощью ключевого слова new, после которого идет имя класса со скобками, как при вызове обычной функции. Этот объект записывается в переменную и становится доступен для работы. Дальше, в зависимости от того как был написан класс, мы можем выполнять разные действия с ним - менять свойства и вызывать методы.

При таком подходе, программа превращается в набор объектов, которые взаимодействуют друг с другом. Через эти объекты выражаются процессы, происходящие в проекте. 

В программировании такой стиль программирования называется объектно-ориентированным (ООП).

-- Связь с реальным миром --

В интернете много вопросов от новичков, что такое ООП (объектно-ориентированное программирование) и как его понять. Один из самых популярных ответов — рассказ про моделирование реального мира через классы. Вот у нас есть машина, вот дом, вот мы для них пишем классы. Такое объяснение больше путает, чем помогает. Классы действительно используются для моделирования, но только не реального мира, а конкретной предметной области. Например, пользователь с точки зрения бухгалтера и системы заказа пиццы — это абсолютно разные сущности. У них разный набор свойств, разное поведение и разное предназначение. 

--- Классы ---

Разберемся в устройстве классов из которых создают объекты на примере кода:

var user = new User("Danil", "Miloshin");

// метод возвращает имя
user.getFirstName(); // "Danil"

Первая строчка – это создание объекта из класса. За это отвечает оператор new.
Затем вызывается конструктор класса, специальный метод, определенный внутри класса и имеющий такое же имя как и класс. Конструктор нужен для инициализации объекта. 

class User {
    public String firstName;
    public String lastName;
}

Свойства выглядят как переменные, определенные внутри класса («на уровне класса») с добавленными к ним модификаторами доступа, как у методов.

class User {
    public String firstName;
    public String lastName;

    User(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

Обратите внимание на this — это указатель на текущий объект. Через него мы можем читать и записывать свойства, а также вызывать методы нашего объекта. 
Свойства хранят данные объектов, причем у каждого объекта они свои.

-- Конструктор по умолчанию --

Иногда у объектов начальная инициализация необязательна, либо ее вообще нет. В таком случае определять конструктор не нужно, так как Java определяет для каждого класса конструктор по умолчанию. Это обычный конструктор, но без параметров.

-- Перегрузка конструктора --

Перегрузка методов распространяется и на конструктор. В зависимости от ситуации можно добавлять любые конструкторы, которые удобно.

--- Доступ к свойствам объекта ---

В реальном программировании к свойствам не принято обращаться напрямую. Почти всегда их делают приватными, то есть закрытыми от прямого внешнего воздействия. Для доступа определяют "геттеры" и "сеттеры".

var user = new User("Jonny", "Depp");
// Геттер
user.getFirstName(); // "Jonny"
// Сеттер
user.setFirstName("Monika"); // "Jonny"

Пример выше можно упростить, так как this не является обязательным. Java понимает, когда имя совпадает с именем свойства и использует его.

Кроме методов доступа к свойствам, классы позволяют описывать любые другие методы, которые нам нужны. Благодаря им и реализуется логика программы.

Существует одна ситуация, в которой использование this обязательно, оно связано с совпадением имени свойства с локальным именем переменной. Например, в такой ситуации:

class User {
    private String firstName;

    // Имена параметров совпадают с именами свойств
    User(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

-- Соглашения и правила --

При работе с классами нужно придерживаться некоторых соглашений:

1.Один файл – один класс. Имя файла и класса совпадают.
2.Классы начинаются с заглавной буквы. Методы с прописной за исключением конструктора.
3.Сеттеры и Геттеры создаются путем добавления приставки set и get
4.Свойства всегда приватные
































































