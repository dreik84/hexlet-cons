Инструкции (Statements):

Инструкция — это команда для компьютера. Код на Java — это набор инструкций, которые, обычно, отделяются друг от друга символом ;

Инструкция — это единица исполнения. Программа, которая запускает код на Java, выполняет инструкции строго по очереди. 

Инструкции ― каркас программы, к ним относят условные конструкции, циклы и классы. Например, if, if-else, while, for. Они задают маршрут, по которому компьютер будет обрабатывать код, но сами никаких действий не производят и не возвращают результат.

Выражения:

Выражение — нечто возвращающее результат, который можно использовать.
Выражения в Java состоят из операндов и операторов. 
Любая строка — выражение. Причем и конкатенация строк — тоже выражение. Когда программа видит выражение, она вычисляет его и возвращает результат.

Операторы:

Операторы — это команды, которые указывают компьютеру, какие действия нужно совершить над операндами. 

Оператор — просто символ, который выполняет операцию.  + — это оператор, а числа 8 и 2 — это операнды.
Операции, которые требуют наличия двух операндов, называются бинарными. Бывают еще: Унарные — с одним операндом и Тернарные — с тремя операндами.
Бинарная операция считается коммутативной, если вы получаете тот же самый результат, поменяв местами операнды. 

Приоритеты операторов - В языке Java последовательность выполнения операций выстроена так, чтобы соблюсти правила арифметики. ???

\n — это пример экранирующей последовательности (escape sequence). Их еще называют управляющими конструкциями.
Операция соединения строк в программировании называется конкатенацией.

Для имени переменной используется любой набор допустимых символов, к которым относятся буквы английского алфавита, цифры, знак _. При этом цифру нельзя ставить в начале. Имена переменных регистрозависимы.
Java — статически типизированный язык. Это значит, что тип переменной задается при определении и больше не меняется.
Java — язык со строгой типизацией. Проще говоря, любой переменной необходимо присваивать тип данных.
Любая переменная может быть частью любого выражения. В момент вычисления вместо имени переменной подставляется ее значение.

Именование переменных:
kebab-case — составные части переменной разделяются дефисом (my-super-var)
snake_case — для разделения используется подчеркивание (my_super_var)
CamelCase — каждое слово в переменной пишется с заглавной буквы (MySuperVar)
lowerCamelCase — каждое слово в переменной пишется с заглавной буквы, кроме первого (mySuperVar)

В Java используется CamelCase и его вариация lowerCamelCase, при котором первая буква первого слова — строчная.

Магические числа (magic numbers) — числа, происхождение которых невозможно понять без глубокого знания происходящего внутри участка кода.

Типы определяют две вещи:
- Допустимые значения.
- Набор допустимых операций.

var – специальное ключевое слово, которое включает механизм вывода типов. Вывод типов автоматически определяет тип присваиваемого значения и связывает его с переменной. 

Глобально, типы данных в Java делятся на две большие группы:
Примитивные — предопределены в Java
Ссылочные — создаются самим программистом, за исключением String и Array

Всего в Java восемь примитивных типов данных:

byte
short
int
long
float
double
boolean
char

Особняком в Java стоит значение null. В Java оно не является типом. Это просто конкретное значение со специальным смыслом и логикой работы.
Любой ссылочный тип данных может принимать значение null. А вот примитивные типы и null не совместимы. Примитивное значение всегда должно быть определено.

Значение по умолчанию

Явное преобразование типов (cast)
Неявное преобразование типов - автоматическое преобразование типов без явного указания программистом.

Функции — одна из ключевых конструкций в программировании. Все функции Java создаются только внутри классов, которые мы пока не разбирали. А функции, которые определены внутри классов, принято называть методами.
Методы — это действия, которые нужно выполнить над данными, к которым они применяются.
В вызовы методов можно передавать параметры.

Синтаксические ошибки - нарушают правила синтаксиса языка. Эти ошибки обнаруживаются на этапе компиляции, до реального запуска.
Ошибки типов - процесс проверки соответствия типов выполняется на этапе компиляции до запуска программы на выполнение.
Ошибки выполнения - возникают в процессе работы. Такие ошибки базируются на механизме исключения (exceptions).
Логические ошибки - ошибки, которые не приводят к остановке программы. То есть программа работает, но ее результат не соответствует ожидаемому.
Ошибки линтера - код на соответствие стандартам кодирования (checkstyle).Соблюдение данных правил не влияет на результат, но помогает писать код понятнее и проще для восприятия.

Строки в Java неизменяемы. Не существует способа и методов, способных изменить саму строку. Любой метод строки может только вернуть новую строку.

Детерминированность
Метод называется детерминированным тогда, когда для одних и тех же входных параметров он возвращает один и тот же результат. 

Побочным эффектом называют действия, которые соприкасаются с внешним окружением. К таким действиям относятся любые сетевые взаимодействия, взаимодействие с файловой системой (чтение и запись файлов), вывод информации на экран, печать на принтере и так далее.





Числа
  - Натуральные — это целые числа от 1 и больше
  - Рациональные — это числа с точкой, например, 0.5  ( операции с плавающими числами неточны, но эту точность можно регулировать. )


Диспетчеризация динамических методов представляет собой механизм, с помощью которого вызов переопределенного
метода распознается во время выполнения, а не на этапе компиляции. Динамическая диспетчеризация методов важна, потому что именно так в Java обеспечивается полиморфизм во время выполнения.



