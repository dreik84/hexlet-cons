JDBC — встроенный механизм Java для работы с базами данных из кода. С его помощью можно создавать схему базы данных, выполнять вставку, обновление и удаление записей. 
JDBC унифицирует работу со всеми базами, предоставляя единый интерфейс для взаимодействия с ними. В теории это позволяет легко заменять одну базу данных другой при необходимости без переписывания кода.

--- Общие принципы работы ---

Подключение базы H2 выполняется одной строчкой:

implementation("com.h2database:h2:2.2.220")

-- Исключения --

Методы для работы с базой данных выбрасывают исключения, которые входят в иерархию классов с базовым исключением SQLException. Поэтому мы должны обращать особое внимание на методы, работающие с запросами. 

-- Соединение с базой данных --

Обычно программисты делают так: рядом со своим приложением они поднимают СУБД, внутри которой они заранее создали необходимую базу данных. Таким образом, приложение соединяется с СУБД и подключается к конкретной базе данных внутри. Для этого нужны параметры подключения:

- IP-адрес или DNS-адрес
- Порт для подключения
- Логин и пароль
- Имя базы данных

База H2 запускается прямо в памяти нашего приложения, поэтому ей не нужны доступы. Эту базу не нужно создавать заранее, она создается в момент выполнения соединения:

var connection = DriverManager.getConnection("jdbc:h2:mem:hexlet_test");

Дальше мы можем работать с базой H2 с помощью SQL.

Здесь все как с обычной реляционной базой данных. Но важно помнить, что эта база существует, только когда приложение запущено. Если мы остановим или перезапустим приложение, это приведет к потере данных. 

-- Стейтмент --

Выполнение запроса в базу данных — это более сложная операция, чем кажется на первый взгляд.

var statement = connection.createStatement();
statement.execute(sql);
statement.close();

В коде выше перед выполнением запроса мы создали стейтмент, а затем закрыли его.
А что будет, если не закрыть стейтмент? Стейтменты удерживают ресурсы системы — если забывать их закрывать, то в итоге это приведет к сбоям в работе приложения.

На каждый тип запроса внутри стейтмента выполняется свой собственный метод по такой схеме:

- Запросы на выборку данных выполняются через метод stmt.executeQuery()
- Запросы на вставку и обновление данных работают через метод stmt.executeUpdate()
- Все остальные запросы через метод stmt.execute() — в нашем примере это создание таблицы

-- Объекты класса ResultSet --

Объекты этого класса выполняют роль курсора — указателя на набор данных, хранящийся в памяти в базе. Другими словами, это не набор извлеченных данных из базы, это всего лишь указатель на них. Кроме того, курсор может последовательно перебирать данные через метод next(). Вызов этого метода приводит к тому, что содержимое объекта подменяется новой порцией данных от СУБД.

Извлечение данных из курсора требует преобразования типов, потому что типы данных в базе далеко не всегда совпадают с типами в Java. Поэтому при получении данных мы должны знать, в какой тип мы хотим преобразовать их.

Также отметим, что ResultSet тоже имеет метод close(), но он используется редко. Обычно ResultSet закрывается автоматически при закрытии стейтмента.

--- Конструкция try-with-resources ---

Cоздатели Java добавили конструкцию try-with-resources. Она позволяет автоматически закрывать объекты, которые реализуют интерфейс java.lang.AutoCloseable — это делают все объекты, подразумевающие закрытие.

var sql = "INSERT INTO users (username, phone) VALUES ('tommy', '123456789')";
try (var statement = conn.createStatement()) {
    statement.executeUpdate(sql);
}

Эта конструкция использует точно такое же ключевое слово, как и обработка исключений, но работает немного по-другому. Она отличается синтаксически: в этом случае после try идут скобки, в которых выполняется выражение, открывающее соединение.

--- Стейтменты ---

Как правило, запросы в базу формируются динамически на основе данных, которые поступают извне.

Составленные таким образом запросы несут в себе серьезную опасность — SQL-инъекции. Вместо обычных данных злоумышленник может отправить текст, который изменит SQL-запрос. 

В разработке существует правило «Никогда не доверяй пользовательским данным» — оно особенно важно в работе с базами данных. Любые данные перед вставкой нужно экранировать с помощью подготовленных запросов.

var sql = "INSERT INTO users (username, phone) VALUES (?, ?)";
try (var preparedStatement = conn.prepareStatement(sql)) {
    preparedStatement.setString(1, "Tommy");
    preparedStatement.setString(2, "33333333");
    preparedStatement.executeUpdate();
}

Подготовленные запросы создаются с помощью плейсхолдеров. Это заполнители, которые расставляются в местах, где ожидается подстановка данных. При этом плейсхолдеры не нужно оборачивать в кавычки, если это строки. JDBC работает так:

- Автоматически выполняет подстановку
- Создает стейтмент preparedStatement
- Передает в него подготовленный SQL-шаблон
- Заполняет шаблон данными
- Вызывает его

setString() принимает на вход два параметра:

- Порядковый номер плейсхолдера
- Данные, которые нужно подставить

-- Ускорение запросов --

Кроме того, preparedStatement может ускорять запросы. Дело в том, что мы можем выполнять множество запросов подряд в рамках одного preparedStatement. За счет этого запрос готовится предварительно, что ускоряет работу.

-- Возврат идентификатора --

Когда мы вставляем данные в базу, иногда нам нужно получить идентификатор вставленной записи и потом использовать его в коде. Это происходит, когда мы создаем какую-то сущность и хотим потом ее использовать:

var generatedKeys = preparedStatement.getGeneratedKeys();
    if (generatedKeys.next()) {
        System.out.println(generatedKeys.getLong(1));
    } else {
        throw new SQLException("DB have not returned an id after saving the entity");
    }

--- Паттерн DAO ---

Работать напрямую с JDBC в коде не очень удобно из-за большого количества низкоуровневых деталей и повторяющегося шаблонного кода. Кроме того, нам постоянно приходится преобразовывать данные в одну и в другую сторону.

Чтобы решить эту проблему, можно скрыть работу с базой за какой-то абстракцией. Один из вариантов такой изоляции называют DAO (Data Access Object).

Концепция DAO очень проста. Она сводится к созданию класса под каждую таблицу в базе данных. В классе реализуются методы, которые сохраняют, удаляют или ищут сущности в этой таблице.