--- HTTP 1.0 ---

HTTP – текстовый протокол, с помощью которого взаимодействуют клиент, например, браузер и сервер. 
Пользователь шлет определенный запрос на сервер, запрашивая или передавая нужные данные, а сервер, в зависимости от запроса, выполняет нужную логику и возвращает результат, обычно это HTML-страница.

HTTP — это протокол прикладного уровня, предназначенный для общения между клиентом и сервером на разных компьютерах. 

Любой адрес сайта это просто имя, за которым скрывается ip-адрес. Имя задано для удобства, так его проще запомнить.

Сайты, доступные по HTTP, доступны на порту 80, а по HTTPS – на порту 443. Это общепринятое соглашение. Именно поэтому в браузерах порты не указываются, браузер подставляет их автоматически.

Запрос состоит из нескольких частей. Первая часть — стартовая строка (request line - метод, путь, версия протокола). Вторая — заголовки.  Заголовки позволяют передавать дополнительную информацию.

HEAD /http-protocol/example HTTP/1.0
User-Agent: google сhrome

Заголовков отделяются друг от друга переводом строки (и никак иначе!). 
Два перевода строки (перевод после последнего заголовка и пустая строка) приводят к отправке данных.

В ответ на запрос приходит response, который состоит из status line (например, HTTP/1.0 200 OK), заголовков ответа и тела ответа.

В HTTP 1.0 в конце после получения данных происходит закрытие соединения.

--- HTTP 1.1 ---

Протокол HTTP 1.1 расширяет возможности предыдущей версии и добавляет виртуальные хосты.

В протоколе HTTP 1.1 появилась одна небольшая деталь. Кроме request line стал обязательным еще и заголовок, который называется host. Он определяет, какой именно домен должен быть возвращен с этого IP адреса.

HEAD /http-protocol/example HTTP/1.1
host: http.hexlet.app

Виртуальные хосты являются неотъемлемым атрибутом HTTP 1.1. Их нельзя игнорировать.

HTTP 1.1 вводит еще одно понятие по умолчанию, которое называется keep-alive. Keep-alive означает, что соединение TCP, по которому ходит HTTP, не закрывается.

Когда мы открываем сайт, то обычно с одного домена грузится несколько ресурсов. Keep-alive позволяет открывать и использовать одно соединение, которое не будет закрыто до тех пор, пока это не будет указано явно, либо не произойдет таймаут. 

Мы также можем указать, что хотим закрыть соединение передав еще один заголовок. Он называется connection: close

--- Тело HTTP-запроса ---

HTTP request и response могут содержать так называемое тело (body). Тело используется для передачи данных от клиента к серверу и наоборот. 

Во время отправки ответа сервер формирует специальный заголовок, который называется Content-Length. Перед тем как отправить тело ответа, происходит вычисление его длины и записывается количество байт.

Content-Length: 1105

После того как передан такой заголовок, другая сторона будет ожидать ровно столько байт, сколько в нем указано.

Для корректной обработки данных в теле запроса или ответа необходимо указывать заголовок Content-Type, который определяет тип содержимого. 

Тело может присутствовать в различных типах запросов (например, POST, PUT), но не имеет смысла в GET-запросах. Некоторые запросы, такие как HEAD, не возвращают тело в ответе.

Некоторые серверы могут некорректно обрабатывать запросы, если указан только заголовок Content-Length, без указания Content-Type. Это может привести к закрытию соединения до получения тела запроса.

--- Отправка форм ---

Формы — это элементы HTML, которые применяются для сбора информации от посетителей веб-сайта. 

При отправке формы мы отправляем какие-то данные. Так как в HTTP не предусмотрены специальные места для отправки данных из форм, они отправляются в теле запроса. 
В зависимости от того, какой заголовок Content-Type установлен, интерпретируется то, как будут закодированы данные при отправке. Обычно используется Content-Type: application/x-www-form-urlencoded.

login=smith&password=12345678

Все, что отправляется на сервер, должно быть закодировано. Обычно кодированием занимаются браузеры. Но в целом, если вы пишете какие-то скрипты это должны сделать вы.

Иногда нам нужно отправить данные, вложенные друг в друга. HTTP не умеет работать с такими данными. Их обработкой занимаются мидлвары (англ. middlewares — промежуточное программное обеспечение). 

Помимо обычного кодирования ключ=значение существуют и другие форматы, но самым популярным является формат JSON. Для отправки данных в этом формате используется заголовок Content-Type: application/json.

--- Transfer-Encoding ---

Механизм передачи небольшими частями, чанками (англ. chunks), и специальный заголовок Transfer-Encoding со значением chunked.
Позволяет надежно передавать данные, когда мы не знаем их конечный размер.
При передаче чанками мы можем обрабатывать ответ до полного получения body.
Таким образом можно передавать сколько угодно чанков, время ограничено только таймаутами внутри сервера.

Формат сообщений: <длина блока в HEX><CRLF><содержание блока><CRLF>
Последний блок строится по той же схеме, потому имеет следующий вид по причине отсутствия содержания: 0<CRLF><CRLF>

Стандарт также позволяет использовать в качестве разделителя только CR или только LF.

--- Передача данных query string ---

Помимо того, что данные на сервер можно передавать через body, которое используется при POST запросах и отправке форм, мы также можем передать так называемую строку запроса query string. 

POST /login?key=value HTTP/1.1

Семантика HTTP-глаголов выражается не только в том, какой вам будет возвращен ответ, а еще и в том, как можно с ним работать. 
Глагол GET считается идемпотентным. Это означает, что его повторное выполнение всегда возвращает один и тот же результат, т.е. это обычный запрос. 
POST-запрос, напротив, не является идемпотентным и предназначен для изменения данных. Таким образом повторный запрос может приводить к другим результатам.

--- Перенаправления ---

Редиректы бывают разных видов, например, временный редирект 302 Found. Он используется, если что-то произошло: сайт не работает, заблокирован и т.д. 

Заголовок Location обязан быть в случае такого статуса ответа, который указывает то место, куда нужно перейти.

--- Базовая аутентификация ---

Аутентификация в HTTP представляет собой процесс проверки подлинности пользователя или клиента. 
В HTTP существует несколько типов аутентификации, среди которых самой простой является базовая аутентификация.

Базовая аутентификация, выглядит как окошко браузера запрашивающее логин и пароль при входе на сайт или какой-то из его разделов. 

Если логин и пароль были переданы и они совпали с теми, что указаны на сервере, то запрос пройдет. 
Если они не совпали или не были переданы, то сервер возвращает код ответа: HTTP 401 Unauthorized.

Логин и пароль, указанные в модальном окне, передаются на сервер в виде заголовка с закодированным сообщением:

GET /secret-path/ HTTP/1.1
Host: hexlet.io
Authorization: Basic aHR0cHdhdGNoOmY=

После того как пользователь успешно аутентифицирован, браузер или клиент API автоматически включает заголовок Authorization с теми же учетными данными во все последующие запросы к тому же серверу.

--- Curl ---

Curl — мощным инструментом для выполнения HTTP-запросов. 
Эта утилита командной строки позволяет управлять различными параметрами запросов с помощью флагов, что значительно упрощает процесс взаимодействия с веб-сервисами.

# -X, --request - задает метод запроса
# --head в этом случае игнорирует тело при выводе
curl --head -X GET http.hexlet.app/http-protocol/example

Если нужно увидеть не только ответ, но и запрос, то подойдет флаг -v или его полная версия --verbose:

# -v, --verbose
curl -v http.hexlet.app/http-protocol/example

Указывать различные заголовки запроса, чтобы передать дополнительную информацию на сервер с помощью флага -H или --header:

# -H, --header
curl -H "Content-Type: application/json" https://http.hexlet.app/http-protocol/users

Когда мы отправляем данные на сервер, например, при создании нового пользователя, мы можем использовать флаг -d для указания тела запроса:

# \ - нужен для указания многострочного кода в терминале
curl -X POST https://http.hexlet.app/http-protocol/users \
   -H "Content-Type: application/json" \
   -d '{ "firstName": "Sam", "lastName": "Johnson", "email": "samj@mail.com", "password": "secret" }'

--- Cookies ---

HTTP - это протокол без сохранения состояния, то есть каждый запрос-ответ не связан с предыдущим запросом-ответом.

Cookie (еще иначе "веб-куки" или "куки браузера") - это небольшой фрагмент данных, строка, который сервер отправляет веб-браузеру пользователя. 
Браузер может хранить куки, создавать новые куки, изменять существующие и отправлять их обратно на тот же сервер при последующих запросах.

set-cookie: 1P_JAR=2020-01-18-09; expires=Mon, 17-Feb-2020 09:24:50 GMT; path=/; domain=.hexlet.app; Secure

Изнутри кука представляет собой пару ключ=значение и отделяется от дополнительных параметров точкой с запятой. 

Куки используются в основном для трех целей:
- Управление сессией - хранение данных пользователя
- Персонализация - пользовательские предпочтения, такие как язык отображения и тема пользовательского интерфейса.
- Отслеживание - запись и анализ поведения пользователей.

-- Сессионные куки -- 

Сессионные куки используются для управления сессией, процессом общения клиента и сервера. 
Клиент отправляет в запросе куку, которую ему выдал сервер. Клиент подтвержает себя, а сервер продолжает с ним сессию. 

Сессионные удаляются при закрытии браузера.

-- Постоянные куки --

Такие куки отличаются от сессионных тем, что можно управлять длиной их жизни при помощи параметра expires:

expires=Thu, 16-Jul-2020 03:39:50 GMT;

Стоит сказать, что есть еще один параметр, который используется для тех же целей — MAX-AGE. В его значении указывается количество секунд, по истечении которых кука будет удалена:

MAX-AGE=2592000;

Заголовок set-cookie, который содержит два параметра MAX-AGE и expires, считается валидным. 

-- Параметры domain и path --

Параметры domain и path задают область видимости куки — это URL, на которые кука может отправляться. 
Если они не заданы, то по умолчанию кука будет пересылаться на сервер только для текущего пути и домена.

domain=.hexlet.app; path=/;

Уникальность куки определяется тремя параметрами key (имя куки), domain и path. 
Это значит, что если какую-то куку нужно переустановить, то при следующем запросе в set-cookie эти параметры должны совпадать. Если хотя бы один из них отличается, то будет установлена новая кука.

-- Удаление куки --

Заголовка для удаления куки не существует. Чтобы удалить ее, нужно установить нулевой или отрицательный MAX-AGE, либо задать expires в прошлом, тогда кука будет немедленно удалена.

-- Куки и безопасность --

Для предотвращения атак с использованием кук есть несколько подходов:
- Использовать атрибут HttpOnly для предотвращения доступа к кукам из JavaScript. В нашем примере такой параметр как раз установлен.
- Важные куки, как кука аутентификации, должны иметь короткое время жизни и атрибут SameSite. Этот атрибут позволяет отправлять куку только внутри одного сайта.

--- HTTPS ---

HTTP передает данные в открытом виде, что делает их уязвимыми для перехвата и чтения злоумышленниками. 

Эти проблемы привели к разработке HTTPS (HyperText Transfer Protocol Secure), который обеспечивает защиту данных в Интернете.

Технически, HTTPS — это просто использование HTTP поверх TLS (Transport Layer Security).

-- TLS --

TLS - это криптографический протокол, который обеспечивает защиту данных при их передаче между клиентом и сервером. 

TLS включает несколько ключевых компонентов:
- Аутентификация: Проверка подлинности сторон, участвующих в соединении.
- Шифрование: Защита данных от перехвата и чтения посторонними.
- Целостность данных: Обеспечение того, что данные не были изменены во время передачи.

-- Сертификаты --

Сертификаты в TLS играют ключевую роль в обеспечении безопасности и доверия в Интернете.

Сертификатный центр (CA) — это организация, которой доверяют браузеры и операционные системы. Она проверяет подлинность сервера и выдает ему цифровой сертификат.

Сервер генерирует пару ключей — один публичный и один частный. Публичный ключ можно свободно распространять, в то время как частный ключ должен храниться в секрете.
CA проверяет предоставленную информацию. Когда сертификатный центр убеждается в подлинности данных, он создает цифровой сертификат для сервера. 

Когда пользователь пытается подключиться к этому серверу, начинается процесс установления TLS-соединения. Веб-браузер запрашивает сертификат сервера. Сервер отправляет свой сертификат, и браузер проверяет его, используя список доверенных сертификатных центров, встроенный в операционную систему или браузер.

Если сертификат был подписан доверенным CA и не истек, браузер принимает его и использует публичный ключ из сертификата для шифрования данных, которые отправляет серверу. Сервер, в свою очередь, использует свой частный ключ для расшифровки этих данных. Таким образом, устанавливается безопасное соединение, защищенное от перехвата и подделки.

--- HTTP/2 и HTTP/3 ---

HTTP/1.1 работал хорошо для своих времен, но по мере усложнения веб-сайтов начали проявляться его ограничения. Одной из главных проблем был принцип работы "один запрос - один ответ".


-- HTTP/2 --

Основная цель HTTP/2 была сделать веб быстрее и эффективнее. Он ввел множество новшеств, таких как мультиплексирование, сжатие заголовков и приоритизацию запросов, которые позволили значительно улучшить производительность и уменьшить задержки.
Данные и заголовки в HTTP/2 передаются в бинарном формате, что делает их более компактными с одной стороны, но с другой, полностью пропадает возможность их читать и отправлять в сыром виде.

Мультиплексирование в HTTP/2 — это одна из ключевых технологий, которая существенно улучшает производительность и эффективность сети по сравнению с HTTP/1.1.
Мультиплексирование позволяет множеству запросов и ответов передаваться одновременно по одному TCP-соединению. 
В HTTP/2 все запросы и ответы идут параллельно по одному соединению. Это значит, что никакой запрос не блокирует другой, и сервер может отправлять ответы в том порядке, в котором они готовы.

Преимущества мультиплексирования:
- Устранение блокировок: Благодаря тому, что запросы могут выполняться параллельно, даже если один из них занимает много времени, другие не будут ждать его завершения.
- Эффективное использование одного соединения: Одно соединение используется для передачи всех данных, что снижает накладные расходы на установку и поддержание соединений.
- Приоритизация: HTTP/2 позволяет задавать приоритеты для запросов. Например, важные ресурсы (CSS, JS) могут загружаться первыми, обеспечивая более быструю и эффективную загрузку страниц.

-- Server Push --

Server push позволяет серверу отправлять клиенту (например, браузеру) ресурсы заранее, до того как клиент их запросит. 

Server push в HTTP/2 значительно улучшает производительность веб-сайтов, позволяя серверу проактивно отправлять ресурсы клиенту. Это сокращает задержки, оптимизирует процесс загрузки страницы и улучшает общее взаимодействие с пользователем.

-- HTTP/3 --

HTTP/3 основан на новом транспортном протоколе QUIC, который заменяет традиционный TCP. 
HTTP/1.1 и HTTP/2 работают поверх TCP (Transmission Control Protocol), который был разработан десятилетия назад и имеет свои ограничения. 
QUIC (Quick UDP Internet Connections) был разработан Google и предложен как решение для улучшения производительности сетевых приложений. 
QUIC использует UDP (User Datagram Protocol) вместо TCP, что позволяет обходить некоторые ограничения TCP и предоставляет новые возможности для оптимизации.

Преимущества HTTP/3
Быстрое установление соединения:
- QUIC использует минимальное количество рукопожатий для установления соединения, что значительно сокращает задержки по сравнению с TCP.
- QUIC включает шифрование TLS на этапе установления соединения, что позволяет избежать дополнительных рукопожатий, необходимых для TLS в TCP.

Устранение Head-of-Line Blocking:
- В TCP, потеря пакета приводит к задержке всех последующих данных, так как они должны быть доставлены в порядке. QUIC решает эту проблему, позволяя независимую доставку потоков данных, что снижает задержки.

Миграция соединений:
- QUIC поддерживает миграцию соединений, что позволяет продолжать передачу данных даже при смене IP-адресов. Это особенно полезно для мобильных устройств, которые могут переключаться между сетями.

Встроенное шифрование:
- QUIC по умолчанию использует шифрование, обеспечивая конфиденциальность и целостность данных.

-- Как работает HTTP/3 --

В отличие от TCP, где требуется несколько рукопожатий для установления соединения и шифрования TLS, QUIC использует одно рукопожатие для обоих процессов.

HTTP/3 использует многопотоковую передачу данных поверх QUIC, что позволяет каждому потоку данных передаваться независимо. Это устраняет проблему блокировки при потере пакетов и повышает общую производительность.