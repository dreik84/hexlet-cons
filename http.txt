--- HTTP 1.0 ---

HTTP – текстовый протокол, с помощью которого взаимодействуют клиент, например, браузер и сервер. 
Пользователь шлет определенный запрос на сервер, запрашивая или передавая нужные данные, а сервер, в зависимости от запроса, выполняет нужную логику и возвращает результат, обычно это HTML-страница.

HTTP — это протокол прикладного уровня, предназначенный для общения между клиентом и сервером на разных компьютерах. 

Любой адрес сайта это просто имя, за которым скрывается ip-адрес. Имя задано для удобства, так его проще запомнить.

Сайты, доступные по HTTP, доступны на порту 80, а по HTTPS – на порту 443. Это общепринятое соглашение. Именно поэтому в браузерах порты не указываются, браузер подставляет их автоматически.

Запрос состоит из нескольких частей. Первая часть — стартовая строка (request line - метод, путь, версия протокола). Вторая — заголовки.  Заголовки позволяют передавать дополнительную информацию.

HEAD /http-protocol/example HTTP/1.0
User-Agent: google сhrome

Заголовков отделяются друг от друга переводом строки (и никак иначе!). 
Два перевода строки (перевод после последнего заголовка и пустая строка) приводят к отправке данных.

В ответ на запрос приходит response, который состоит из status line (например, HTTP/1.0 200 OK), заголовков ответа и тела ответа.

В HTTP 1.0 в конце после получения данных происходит закрытие соединения.

--- HTTP 1.1 ---

Протокол HTTP 1.1 расширяет возможности предыдущей версии и добавляет виртуальные хосты.

В протоколе HTTP 1.1 появилась одна небольшая деталь. Кроме request line стал обязательным еще и заголовок, который называется host. Он определяет, какой именно домен должен быть возвращен с этого IP адреса.

HEAD /http-protocol/example HTTP/1.1
host: http.hexlet.app

Виртуальные хосты являются неотъемлемым атрибутом HTTP 1.1. Их нельзя игнорировать.

HTTP 1.1 вводит еще одно понятие по умолчанию, которое называется keep-alive. Keep-alive означает, что соединение TCP, по которому ходит HTTP, не закрывается.

Когда мы открываем сайт, то обычно с одного домена грузится несколько ресурсов. Keep-alive позволяет открывать и использовать одно соединение, которое не будет закрыто до тех пор, пока это не будет указано явно, либо не произойдет таймаут. 

Мы также можем указать, что хотим закрыть соединение передав еще один заголовок. Он называется connection: close

--- Тело HTTP-запроса ---

HTTP request и response могут содержать так называемое тело (body). Тело используется для передачи данных от клиента к серверу и наоборот. 

Во время отправки ответа сервер формирует специальный заголовок, который называется Content-Length. Перед тем как отправить тело ответа, происходит вычисление его длины и записывается количество байт.

Content-Length: 1105

После того как передан такой заголовок, другая сторона будет ожидать ровно столько байт, сколько в нем указано.

Для корректной обработки данных в теле запроса или ответа необходимо указывать заголовок Content-Type, который определяет тип содержимого. 

Тело может присутствовать в различных типах запросов (например, POST, PUT), но не имеет смысла в GET-запросах. Некоторые запросы, такие как HEAD, не возвращают тело в ответе.

Некоторые серверы могут некорректно обрабатывать запросы, если указан только заголовок Content-Length, без указания Content-Type. Это может привести к закрытию соединения до получения тела запроса.

--- Отправка форм ---

Формы — это элементы HTML, которые применяются для сбора информации от посетителей веб-сайта. 

При отправке формы мы отправляем какие-то данные. Так как в HTTP не предусмотрены специальные места для отправки данных из форм, они отправляются в теле запроса. 
В зависимости от того, какой заголовок Content-Type установлен, интерпретируется то, как будут закодированы данные при отправке. Обычно используется Content-Type: application/x-www-form-urlencoded.

login=smith&password=12345678

Все, что отправляется на сервер, должно быть закодировано. Обычно кодированием занимаются браузеры. Но в целом, если вы пишете какие-то скрипты это должны сделать вы.

Иногда нам нужно отправить данные, вложенные друг в друга. HTTP не умеет работать с такими данными. Их обработкой занимаются мидлвары (англ. middlewares — промежуточное программное обеспечение). 

Помимо обычного кодирования ключ=значение существуют и другие форматы, но самым популярным является формат JSON. Для отправки данных в этом формате используется заголовок Content-Type: application/json.







































