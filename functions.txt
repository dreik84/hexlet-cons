--- Введение ---

Этот курс представляет собой захватывающее путешествие в мир функционального программирования на Java. Вы углубитесь в изучение таких ключевых понятий, как лямбда-функции, функции высшего порядка, композиция функций, функциональные интерфейсы и рассмотрите, как функции могут быть использованы как объекты первого рода в Java. Эти концепции необходимы для разработки эффективного, модульного и легко поддерживаемого кода.

--- Лямбда-функции ---

До сих пор в Java мы встречались только с методами, хотя и слышали термин «функция». В отличие от методов, функции существуют сами по себе без привязки к классу. Технически Java не позволяет создавать подобные функции, поэтому почти всегда, когда нужна обычная функция, в Java создается статический метод.

Статические методы вполне заменяют обычные функции, хотя и делают код более многословным. Но встречаются и другие ситуации, где функции удобны и речь здесь идет про лямбда-функции или, как их еще называют, анонимные функции.

-- forEach() в Map --

Рассмотрим на примере Map. Для того чтобы обойти пары ключ-значения, мы скорее всего воспользуемся методом entrySet(), который возвращает специальный объект, содержащий и ключ и значение.

Но эту же задачу можно решить проще, если воспользоваться методом forEach(), который работает с лямбда-функциями.

codes.forEach((key, value) -> {
    System.out.println(key);
    System.out.println(value);
});

В этом примере мы используем метод forEach(), параметром которого является лямбда-функция. Эта лямбда-функция принимает на вход два параметра: ключ и значение. В ее теле выполняется тот код, который мы напишем.

Лямбда-функция записывается так: () -> {}. То, что в скобках – это параметры. То, что в фигурных скобках – это тело функции. Знак -> отделяет параметры от тела. Особенностью лямбда-функций является то, что параметры указываются без типов данных.

-- forEach() в списках --

Похожая реализация forEach() есть и в списках. Здесь лямбда-функция принимает на вход один параметр.

temperatures.forEach(value -> System.out.println(value));

В этом примере произошло два упрощения:

- Убраны фигурные скобки у тела функции — такое допустимо, если внутри тела выполняется одна инструкция
- Убраны скобки вокруг параметра — это допустимо, если параметр всего один

-- Упрощенный синтаксис лямбда-функций --

Лямбда-функции могут не только выполнять какое-то действие, но и возвращать значение. Рассмотрим на примере метода replaceAll() в списках. Метод заменяет каждый элемент списка на результат, который вернет лямбда-функция для текущего элемента

temperatures.replaceAll(value -> {
    return value + 273;
});

В Java существует альтернативный вариант записи лямбда-функций

temperatures.replaceAll(value -> value + 273);

В этом примере мы опустили фигурные скобки у тела функции и ключевое слово return. Так можно делать, когда лямбда-функция содержит только одно выражение, результат которого должен быть возвращен. В этом случае Java автоматически возвращает результат выражения без явного использования return

-- Ограничение на использование контекста --

Как и в случае циклов, мы можем внутри тела лямбда-функции использовать данные взятые из внешнего контекста, то есть определенные вне тела функции.

var n = 2;
temperatures.forEach((value) -> {
    System.out.println(value * n);
});

Но есть ограничение. В отличие от циклов, где с этими данными можно выполнять любые действия, лямбда-функции ограничены тем, что не могут изменять значение переменных, с которыми идет работа.

var n = 10;
temperatures.forEach((value) -> {
    System.out.println(value * n--); // ошибка
});

Подобный код приведет к ошибке: Local variable n defined in an enclosing scope must be final or effectively final

--- Сортировка списков ---

Сортировка списков – один из ярких примеров использования лямбда-функций и их преимущества перед другими способами. Лямбда-функции позволяют спрятать процесс перебора элементов внутрь метода сортировки, оставив программисту задачу реализации способа сравнения двух элементов. 

Обычная сортировка списка в естественном порядке сводится к вызову одного метода:

Collections.sort(langs);

Лямбда-функции позволяют отделить алгоритм сортировки от логики сравнения элементов.

langs.sort((v1, v2) -> Integer.compare(v1.length(), v2.length()));

Лямбда-функция, передаваемая в метод sort(), принимает на вход два элемента в том порядке, в котором они идут в исходном списке. Если элементы равны между собой, то функция должна вернуть 0, если первый элемент меньше чем второй, то -1, если второй меньше чем первый, то 1.

<	==	>
-1	0	1

В случае примитивных типов данных, такую логику не нужно реализовывать самостоятельно, она уже реализована в методах Character.compare(), Integer.compare() и так далее.

Даже в случае объектов, сортировка почти всегда сводится к сравнению примитивных типов данных. Ниже пример сортировки пользователей по возрасту:

users.sort((u1, u2) -> Integer.compare(u1.getAge(), u2.getAge()));

Для полноты картины и понимания статей в интернете, рассмотрим альтернативный вариант сортировки, который делает то же самое что и примеры выше, но с применением встроенного класса Comparator:

langs.sort(Comparator.comparingInt((v) -> v.length()));
users.sort(Comparator.comparingInt((v) -> v.getAge()));

Comparator.comparingInt() принимает на вход лямбда-функцию, которая принимает на вход сравниваемые данные и должна вернуть числовое значение, полученное на базе этих данных для сравнения.

--- Методы Compute в Map ---

forEach() не единственный метод в Map, работающий с лямбда-функциями. Кроме него есть набор методов compute. Они позволяют вычислять значение динамически, базируясь на том, существует ли запрашиваемый ключ в коллекции или нет.

-- compute() --

Метод compute() обновляет значение ключа в Map, на основе логики, заданной внутри лямбда-функции. Эта лямбда-функция получает на вход текущее значение ключа, выполняет с ним необходимые операции и возвращает новое значение.

wordCount.compute(word, (key, count) -> count == null ? 1 : count + 1);

Здесь мы встречаемся с интересной особенностью сокращенной версии лямбда-функции. Возврат, в сокращенной версии лямбда-функции, выполняется автоматически.

-- computeIfAbsent() --

Метод computeIfAbsent() отличается от compute(), тем, что лямбда вызывается только в том случае, если ключа в коллекции до этого не было. 

-- computeIfPresent() --

Метод computeIfPresent() отличается от compute() тем, что лямбда вызывается только в том случае, если ключ уже был добавлен в коллекцию.

--- Функциональный интерфейс (Functional Interface) ---

В Java все реализуется через классы, даже если снаружи так не кажется. Лямбда-функции — не исключение. Чтобы определять лямбда-функции и создавать методы для работы с ними, нужно разобраться с функциональными интерфейсами. 

Функциональный интерфейс — это интерфейс с единственным абстрактным методом. Он "под капотом" используется как тип для соответствующих ему лямбда-функций. 

@FunctionalInterface
public interface Transformer {
    // Имя метода может быть любым
    // Количество параметров может быть любым
    String apply(String input);
}

Теперь мы можем определять лямбда-функции, соответствующие этому интерфейсу, записывать их в переменные и вызывать.

Transformer upperCaseTransformer = (input) -> input.toUpperCase();
var result = upperCaseTransformer.apply("hello");

Из кода выше мы видим, что лямбда-функция это объект, где методом является определение лямбда-функции. Это значит, что мы без проблем можем описывать их в параметрах методов.

var result = LambdaDemo.transform((input) -> input.toUpperCase(), "hello");

Некоторые ситуации использования лямбда-функций настолько распространенные, что функциональные интерфейсы для них встроили прямо в Java. В большинстве случаев вы будете встречаться с ними не напрямую, а через код, в котором они уже задействованы. 

--- Ссылки на методы (Method References) ---

Ссылка на метод (Method Reference) – это сокращенная форма лямбда выражения для вызова методов. То есть это синтаксический сахар, который делает код короче и проще для чтения.

langs.forEach((lang) -> System.out.println(lang));
langs.forEach(System.out::println);

Общий синтаксис ссылки на метод выглядит так:

Name::methodName

Где Name может быть как объектом так и классом, в зависимости от того, ссылку на что мы хотим получить и как это будет использовано потом. 

objectName::methodName // (v) -> objectName.methodName(v)
ClassName::staticMethodName // (v) -> ClassName.staticMethodName(v)
ClassName::methodName // (v) -> v.methodName()

Последний пример часто применяется с Comparator при сортировках:

words.sort(Comparator.comparingInt(String::length));
// Эквивалент
// words.sort((w1, w2) -> Integer.compare(w1.length(), w2.length()));






























































