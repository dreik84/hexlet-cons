--- Введение ---

Java Maps – одна из наиболее важных и широко используемых структур данных в языке программирования Java. Maps предоставляют мощный и гибкий способ хранения и управления данными в виде пар ключ-значение.

---  HashMap ---

Принцип организации Map в Java похож на то, как организованы списки:

- В стандартную библиотеку входит интерфейс Map, который описывает основные методы для работы коллекции.
- Там же находятся конкретные реализации этого интерфейса, которые отличаются производительностью и потребляемыми ресурсами. Среди них самая универсальная и распространенная реализация это HashMap.

var codes = new HashMap<String, Integer>();

Типы данных, которые хранятся внутри указываются между символами < и > через запятую. Первый тип относится к ключу, второй к данным. Какие методы мы использовали:

- put() добавляет или изменяет значение ключа
- containsKey() - проверяет наличие ключа в коллекции с учетом регистра
- get() - возвращает элемент по имени ключа. Если ключ не найден, то возвращается null.
- getOrDefault() - в отличие от get(), в случае если ключ не найден, возвращает значение по умолчанию переданное вторым параметром
- size() возвращает количество ключей в коллекции
- isEmpty() проверяет, является ли коллекция пустой

Кроме добавления ключей их можно удалять. Метод remove() удаляет ключ, если он существует

Если у коллекции есть начальный набор элементов и он достаточно большой, то их можно указать сразу с помощью метода Map.of(). Единственное нужно учитывать, что Map.of() создает неизменяемую коллекцию, то есть его элементы можно использовать, но изменять саму коллекцию нельзя. Чтобы добавить возможность ее изменения, нужно выполнить ее преобразование в HashMap.

var map = Map.of("usa", 1, "england", 44);
var codes = new HashMap<String, Integer>(map);

-- Как работают ключи --

HashMap внутри себя реализован с помощью хеш-таблиц. Хеш-таблица это структура данных, которая позволяет хранить, обновлять и удалять пары ключ-значение в обычных массивах. 

Хеш-код это число, которое формируется для каждого ключа добавленного в HashMap. Оно используется для того, чтобы определить место в хеш-таблице для данной пары ключ-значение. Хеш-код формируется самим ключом. HashMap лишь вызывает метод hashCode(), который добавлен во все объекты Java. 

Точно так же, метод hashCode() присутствует и у всех объектов, определенных пользователем. Однако его реализация по умолчанию не подходит для работы с HashMap. Она спроектирована так, чтобы возвращать различные числа для разных объектов с точки зрения адресации в памяти. 

