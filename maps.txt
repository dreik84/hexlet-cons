--- Введение ---

Java Maps – одна из наиболее важных и широко используемых структур данных в языке программирования Java. Maps предоставляют мощный и гибкий способ хранения и управления данными в виде пар ключ-значение.

---  HashMap ---

Принцип организации Map в Java похож на то, как организованы списки:

- В стандартную библиотеку входит интерфейс Map, который описывает основные методы для работы коллекции.
- Там же находятся конкретные реализации этого интерфейса, которые отличаются производительностью и потребляемыми ресурсами. Среди них самая универсальная и распространенная реализация это HashMap.

var codes = new HashMap<String, Integer>();

Типы данных, которые хранятся внутри указываются между символами < и > через запятую. Первый тип относится к ключу, второй к данным. Какие методы мы использовали:

- put() добавляет или изменяет значение ключа
- containsKey() - проверяет наличие ключа в коллекции с учетом регистра
- get() - возвращает элемент по имени ключа. Если ключ не найден, то возвращается null.
- getOrDefault() - в отличие от get(), в случае если ключ не найден, возвращает значение по умолчанию переданное вторым параметром
- size() возвращает количество ключей в коллекции
- isEmpty() проверяет, является ли коллекция пустой

Кроме добавления ключей их можно удалять. Метод remove() удаляет ключ, если он существует

Если у коллекции есть начальный набор элементов и он достаточно большой, то их можно указать сразу с помощью метода Map.of(). Единственное нужно учитывать, что Map.of() создает неизменяемую коллекцию, то есть его элементы можно использовать, но изменять саму коллекцию нельзя. Чтобы добавить возможность ее изменения, нужно выполнить ее преобразование в HashMap.

var map = Map.of("usa", 1, "england", 44);
var codes = new HashMap<String, Integer>(map);

-- Как работают ключи --

HashMap внутри себя реализован с помощью хеш-таблиц. Хеш-таблица это структура данных, которая позволяет хранить, обновлять и удалять пары ключ-значение в обычных массивах. 

Хеш-код это число, которое формируется для каждого ключа добавленного в HashMap. Оно используется для того, чтобы определить место в хеш-таблице для данной пары ключ-значение. Хеш-код формируется самим ключом. HashMap лишь вызывает метод hashCode(), который добавлен во все объекты Java. 

Точно так же, метод hashCode() присутствует и у всех объектов, определенных пользователем. Однако его реализация по умолчанию не подходит для работы с HashMap. Она спроектирована так, чтобы возвращать различные числа для разных объектов с точки зрения адресации в памяти. 

--- Обход Map ---

Обход HashMap не самая частая операция, но иногда встречается. В отличие от списков, где обход это просто перебор элементов списка, обход HashMap может включать в себя обход пар ключ-значения, обход ключей и значений по отдельности. Всего есть два основных подхода к этим обходам:

- С помощью метода forEach().
- С помощью преобразования HashMap в коллекцию, которая работает с for-each. Этот подход включает в себя три разных варианта: обход пар ключ-значения (entrySet()), обход значений values() и обход ключей keySet().

-- Обход значений --

Обход значений в HashMap выполняется по коллекции, полученной с помощью метода values():

var values = codes.values(); // Получаем значения
for (var value : values) {
    System.out.println(value);
}

-- Обход ключей --

Для обхода ключей их нужно получить с помощью метода keySet(). Этот метод возвращает коллекцию типа Set, которая отличается от List тем, что значения внутри этой коллекции уникальны. С точки зрения обхода ничего не меняется:

var keys = codes.keySet();
for (var key : keys) {
    System.out.println(key);
}

Как бонус, имея на руках ключ, мы можем достать значение из Map.

-- Обход пар ключ-значение --

Если нам одновременно нужны ключ и значение, то можно воспользоваться методом entrySet(), который возвращает пару ключ-значение в виде объекта для удобного доступа:

var entries = codes.entrySet();
for (var entry : entries) {
    System.out.println(entry.getKey());
    System.out.println(entry.getValue());
}

-- Использование forEach --

Самый удобный способ выполнить обход ключей и значений — это использование метода forEach().

codes.forEach((key, value) -> {
    System.out.println(key);
    System.out.println(value);
});

Но независимо от способа обхода, важно учитывать то, что HashMap не является последовательной структурой как ArrayList. Порядок добавления элементов не влияет на их порядок обхода. Порядок обхода зависит от того, как данные хранятся внутри, что невозможно предсказать. Поэтому работая с HashMap нельзя опираться на порядок.

Если порядок все же нужен, то вместо HashMap можно использовать LinkedHashMap, реализацию, которая запоминает порядок добавления элементов и использует его при обходе.

---  Структура Map в действии ---

Одна из самых простых и показательных задач при работе с HashMap это подсчет слов в предложении. В этой задаче формируется Map, в котором ключ — это слово из предложения, а значение — это количество раз, которое слово встретилось в тексте.

Для реализации этой задачи понадобится выполнить следующие шаги:

1. Разбить предложение на список слов.
2. Инициализировать HashMap в который мы будем складывать слова и частоту их употребления.
3. Обойти список слов и добавить их в HashMap, в котором ключом будет само слово, а значением количество упоминаний. Если ключ встречается первый раз, то значением будет единица, иначе нужно текущее значение увеличивать на единицу.

Формирование Map во время обхода какого-то списка, достаточно распространенная задача в программировании. 








































